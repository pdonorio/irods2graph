#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Moving data from iRODS server to Neo4j graphdb
[ N.B. this is an IPython script! ]
"""

################################
## LIBS
import os
import configparser
# Make this script a powerful command line program:
import click

################################
## CONFIGURATION
USER_HOME = os.environ['HOME']
IRODS_ENV = USER_HOME + "/.irods/.irodsEnv"
CONFIG_FILE = "./connections.ini"

################################
## CLI EXECUTION HANDLING
@click.group()
@click.option('-v', '--verbose', count=True)
def cli(verbose):
    #pass
    click.echo('Script init. Verbosity: %s' % verbose)
    # Do we have iRODS?
    check_init(IRODS_ENV, CONFIG_FILE)

# Filling data inside irods
@click.command()
def popolae():
    click.echo('COMMAND:\tFilling irods.')
cli.add_command(popolae)

# Converting data from irods to a graph
@click.command()
@click.option('--elements', default=10, type=int, \
    help='number of elements to find and convert')
@click.argument('account')
def convert(account, elements):
    click.echo('COMMAND:\tConverting iRODS objects inside a modeled graphdb')
    #click.echo('Account: ' + account + ", Elements: " + elements.__str__())
cli.add_command(convert)

################################
## INIT methods

def check_init(irodsenv, configuration_file, section='irods'):
    """ Prepare an ini file for future usage """

    nosection = False

    if os.path.exists(configuration_file):
        Config = configparser.ConfigParser()
        Config.read(configuration_file)
        if not section in Config.sections():
            nosection = True
    else:
        nosection = True

    # Get irods data and save them only if not available yet
    if nosection:
        print("No section "+section+" found")
        data = get_irods_init(irodsenv)
        write_init(configuration_file, data, section)


def get_irods_init(irodsenv):

    # Check if irods client exists and is configured
    if not os.path.exists(irodsenv):
        raise EnvironmentError("No irods environment found")
    print("Found data in " + irodsenv)

    # Recover irods data
    data = {}
    for element in [line.strip() for line in open(irodsenv, 'r')]:
        key, value = element.split(" ")
        data[key] = value
    if data.__len__() < 2:
        raise EnvironmentError("Wrong irods environment in " + irodsenv)
    return data

def write_init(configuration_file, data, section):

    # Create the section - append mode for file, since something else may exists
    with open(configuration_file,'a') as cfgfile:
        Config = configparser.ConfigParser()
        Config.add_section(section)

        for key, value in data.items():
            Config.set(section, key, value)
        Config.write(cfgfile)
    print("Wrote ini file and its irods section")

################################
## Connect to irods
def irods_connection():
    from irods.session import iRODSSession
    sess = iRODSSession(host='localhost', port=1247, user='rods', \
        password='rods', zone='tempZone')

# ################################
# ## READ LOOP

# ## OLD...

# # Get list
# objlist = !ils [0-9a-z]*.txt
# metas = {}

# for obj in objlist:
#     ifile = os.path.basename(obj.strip())
#     meta = !imeta ls -d {ifile}
#     metas[ifile] = meta[1]
#     #print("Element " + ifile + " with meta " + meta[1])

# print(metas)

################################
## MAIN
if __name__ == '__main__':
    cli()
